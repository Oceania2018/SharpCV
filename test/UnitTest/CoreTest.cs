using Microsoft.VisualStudio.TestTools.UnitTesting;
using SharpCV;
using System;
using System.Collections.Generic;
using System.Text;
using static SharpCV.Binding;
using NumSharp;

namespace UnitTest
{
    [TestClass]
    public class CoreTest : Test
    {
        [TestMethod]
        public void pixel_getter()
        {
            // getter
            var img1 = cv2.imread(imgSolar);
            var (b, g, r) = img1[8, 8];
            Assert.AreEqual((32, 19, 11), (b, g, r));

            // access specific channel
            b = img1[8, 8, 0];
            g = img1[8, 8, 1];
            r = img1[8, 8, 2];
            Assert.AreEqual((32, 19, 11), (b, g, r));

            var img2 = cv2.imread(imgSolar, IMREAD_COLOR.IMREAD_GRAYSCALE);
            byte p = img2[8, 8];
            Assert.AreEqual(18, p);
        }

        [TestMethod]
        public void pixel_setter()
        {
            var img = cv2.imread(imgSolar);
            // img[8, 8] = (0, 0, 255);
        }

        [TestMethod]
        public void hconcat()
        {
            var img = cv2.imread(imgSolar);
            var hconcated = cv2.hconcat(img, img);
            Assert.AreEqual(410, hconcated.shape[0]);
            Assert.AreEqual(1460, hconcated.shape[1]);
            Assert.AreEqual(3, hconcated.shape[2]);
        }

        [TestMethod]
        public void vconcat()
        {
            var img = cv2.imread(imgSolar);
            var hconcated = cv2.vconcat(img, img);
            Assert.AreEqual(820, hconcated.shape[0]);
            Assert.AreEqual(730, hconcated.shape[1]);
            Assert.AreEqual(3, hconcated.shape[2]);
        }

        [TestMethod]
        public void rotate()
        {
            var img = cv2.imread(imgSolar);
            var rotated = cv2.rotate(img, RotateFlags.ROTATE_90_CLOCKWISE);
            Assert.AreEqual(730, rotated.shape[0]);
            Assert.AreEqual(410, rotated.shape[1]);
            Assert.AreEqual(3, rotated.shape[2]);
        }

        [TestMethod]
        public void flip()
        {
            var img = cv2.imread(imgSolar);
            var flipped = cv2.flip(img, FLIP_MODE.FLIP_HORIZONTAL_MODE);
            Assert.AreEqual(410, flipped.shape[0]);
            Assert.AreEqual(730, flipped.shape[1]);
            Assert.AreEqual(3, flipped.shape[2]);
        }

        [TestMethod]
        public void NDShow()
        {
            cv2.imshow("NDShowTest", mnist_1);
        }
        NDArray mnist_1 = new NDArray(new[, , ]{{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.011764706},
{0.07058824},
{0.07058824},
{0.07058824},
{0.49411765},
{0.53333336},
{0.6862745},
{0.101960786},
{0.6509804},
{1},
{0.96862745},
{0.49803922},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.11764706},
{0.14117648},
{0.36862746},
{0.6039216},
{0.6666667},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.88235295},
{0.6745098},
{0.99215686},
{0.9490196},
{0.7647059},
{0.2509804},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.19215687},
{0.93333334},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.9843137},
{0.3647059},
{0.32156864},
{0.32156864},
{0.21960784},
{0.15294118},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.07058824},
{0.85882354},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.7764706},
{0.7137255},
{0.96862745},
{0.94509804},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.3137255},
{0.6117647},
{0.41960785},
{0.99215686},
{0.99215686},
{0.8039216},
{0.043137256},
{0},
{0.16862746},
{0.6039216},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.05490196},
{0.003921569},
{0.6039216},
{0.99215686},
{0.3529412},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.54509807},
{0.99215686},
{0.74509805},
{0.007843138},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.043137256},
{0.74509805},
{0.99215686},
{0.27450982},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.13725491},
{0.94509804},
{0.88235295},
{0.627451},
{0.42352942},
{0.003921569},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.31764707},
{0.9411765},
{0.99215686},
{0.99215686},
{0.46666667},
{0.09803922},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.1764706},
{0.7294118},
{0.99215686},
{0.99215686},
{0.5882353},
{0.105882354},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.0627451},
{0.3647059},
{0.9882353},
{0.99215686},
{0.73333335},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.9764706},
{0.99215686},
{0.9764706},
{0.2509804},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.18039216},
{0.50980395},
{0.7176471},
{0.99215686},
{0.99215686},
{0.8117647},
{0.007843138},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.15294118},
{0.5803922},
{0.8980392},
{0.99215686},
{0.99215686},
{0.99215686},
{0.98039216},
{0.7137255},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.09411765},
{0.44705883},
{0.8666667},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.7882353},
{0.30588236},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0.09019608},
{0.25882354},
{0.8352941},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.7764706},
{0.31764707},
{0.007843138},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0.07058824},
{0.67058825},
{0.85882354},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.7647059},
{0.3137255},
{0.03529412},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0.21568628},
{0.6745098},
{0.8862745},
{0.99215686},
{0.99215686},
{0.99215686},
{0.99215686},
{0.95686275},
{0.52156866},
{0.043137256},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0.53333336},
{0.99215686},
{0.99215686},
{0.99215686},
{0.83137256},
{0.5294118},
{0.5176471},
{0.0627451},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}},
{{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0},
{0}}});

    }
}
